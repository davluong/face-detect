// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class ColorData;
class PointData;
class LineData;
class FeatureData;

// ===================================================================

class ColorData : public ::google::protobuf::Message {
 public:
  ColorData();
  virtual ~ColorData();

  ColorData(const ColorData& from);

  inline ColorData& operator=(const ColorData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorData& default_instance();

  void Swap(ColorData* other);

  // implements Message ----------------------------------------------

  ColorData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorData& from);
  void MergeFrom(const ColorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);

  // optional int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);

  // optional int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ColorData)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static ColorData* default_instance_;
};
// -------------------------------------------------------------------

class PointData : public ::google::protobuf::Message {
 public:
  PointData();
  virtual ~PointData();

  PointData(const PointData& from);

  inline PointData& operator=(const PointData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointData& default_instance();

  void Swap(PointData* other);

  // implements Message ----------------------------------------------

  PointData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointData& from);
  void MergeFrom(const PointData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 t1 = 3;
  inline bool has_t1() const;
  inline void clear_t1();
  static const int kT1FieldNumber = 3;
  inline ::google::protobuf::int32 t1() const;
  inline void set_t1(::google::protobuf::int32 value);

  // optional int32 t2 = 4;
  inline bool has_t2() const;
  inline void clear_t2();
  static const int kT2FieldNumber = 4;
  inline ::google::protobuf::int32 t2() const;
  inline void set_t2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PointData)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_t1();
  inline void clear_has_t1();
  inline void set_has_t2();
  inline void clear_has_t2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 t1_;
  ::google::protobuf::int32 t2_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static PointData* default_instance_;
};
// -------------------------------------------------------------------

class LineData : public ::google::protobuf::Message {
 public:
  LineData();
  virtual ~LineData();

  LineData(const LineData& from);

  inline LineData& operator=(const LineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineData& default_instance();

  void Swap(LineData* other);

  // implements Message ----------------------------------------------

  LineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineData& from);
  void MergeFrom(const LineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PointData point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::PointData& point(int index) const;
  inline ::PointData* mutable_point(int index);
  inline ::PointData* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_point();

  // optional .ColorData color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::ColorData& color() const;
  inline ::ColorData* mutable_color();
  inline ::ColorData* release_color();
  inline void set_allocated_color(::ColorData* color);

  // @@protoc_insertion_point(class_scope:LineData)
 private:
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PointData > point_;
  ::ColorData* color_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static LineData* default_instance_;
};
// -------------------------------------------------------------------

class FeatureData : public ::google::protobuf::Message {
 public:
  FeatureData();
  virtual ~FeatureData();

  FeatureData(const FeatureData& from);

  inline FeatureData& operator=(const FeatureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureData& default_instance();

  void Swap(FeatureData* other);

  // implements Message ----------------------------------------------

  FeatureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureData& from);
  void MergeFrom(const FeatureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LineData line = 1;
  inline int line_size() const;
  inline void clear_line();
  static const int kLineFieldNumber = 1;
  inline const ::LineData& line(int index) const;
  inline ::LineData* mutable_line(int index);
  inline ::LineData* add_line();
  inline const ::google::protobuf::RepeatedPtrField< ::LineData >&
      line() const;
  inline ::google::protobuf::RepeatedPtrField< ::LineData >*
      mutable_line();

  // repeated .PointData point = 2;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline const ::PointData& point(int index) const;
  inline ::PointData* mutable_point(int index);
  inline ::PointData* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_point();

  // optional int32 fps = 3;
  inline bool has_fps() const;
  inline void clear_fps();
  static const int kFpsFieldNumber = 3;
  inline ::google::protobuf::int32 fps() const;
  inline void set_fps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FeatureData)
 private:
  inline void set_has_fps();
  inline void clear_has_fps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::LineData > line_;
  ::google::protobuf::RepeatedPtrField< ::PointData > point_;
  ::google::protobuf::int32 fps_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static FeatureData* default_instance_;
};
// ===================================================================


// ===================================================================

// ColorData

// optional int32 r = 1;
inline bool ColorData::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorData::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorData::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorData::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline ::google::protobuf::int32 ColorData::r() const {
  // @@protoc_insertion_point(field_get:ColorData.r)
  return r_;
}
inline void ColorData::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:ColorData.r)
}

// optional int32 g = 2;
inline bool ColorData::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorData::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorData::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorData::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 ColorData::g() const {
  // @@protoc_insertion_point(field_get:ColorData.g)
  return g_;
}
inline void ColorData::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:ColorData.g)
}

// optional int32 b = 3;
inline bool ColorData::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorData::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorData::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorData::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 ColorData::b() const {
  // @@protoc_insertion_point(field_get:ColorData.b)
  return b_;
}
inline void ColorData::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:ColorData.b)
}

// -------------------------------------------------------------------

// PointData

// optional int32 x = 1;
inline bool PointData::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointData::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointData::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PointData::x() const {
  // @@protoc_insertion_point(field_get:PointData.x)
  return x_;
}
inline void PointData::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:PointData.x)
}

// optional int32 y = 2;
inline bool PointData::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointData::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointData::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PointData::y() const {
  // @@protoc_insertion_point(field_get:PointData.y)
  return y_;
}
inline void PointData::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:PointData.y)
}

// optional int32 t1 = 3;
inline bool PointData::has_t1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointData::set_has_t1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointData::clear_has_t1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointData::clear_t1() {
  t1_ = 0;
  clear_has_t1();
}
inline ::google::protobuf::int32 PointData::t1() const {
  // @@protoc_insertion_point(field_get:PointData.t1)
  return t1_;
}
inline void PointData::set_t1(::google::protobuf::int32 value) {
  set_has_t1();
  t1_ = value;
  // @@protoc_insertion_point(field_set:PointData.t1)
}

// optional int32 t2 = 4;
inline bool PointData::has_t2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointData::set_has_t2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointData::clear_has_t2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointData::clear_t2() {
  t2_ = 0;
  clear_has_t2();
}
inline ::google::protobuf::int32 PointData::t2() const {
  // @@protoc_insertion_point(field_get:PointData.t2)
  return t2_;
}
inline void PointData::set_t2(::google::protobuf::int32 value) {
  set_has_t2();
  t2_ = value;
  // @@protoc_insertion_point(field_set:PointData.t2)
}

// -------------------------------------------------------------------

// LineData

// repeated .PointData point = 1;
inline int LineData::point_size() const {
  return point_.size();
}
inline void LineData::clear_point() {
  point_.Clear();
}
inline const ::PointData& LineData::point(int index) const {
  // @@protoc_insertion_point(field_get:LineData.point)
  return point_.Get(index);
}
inline ::PointData* LineData::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:LineData.point)
  return point_.Mutable(index);
}
inline ::PointData* LineData::add_point() {
  // @@protoc_insertion_point(field_add:LineData.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
LineData::point() const {
  // @@protoc_insertion_point(field_list:LineData.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
LineData::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:LineData.point)
  return &point_;
}

// optional .ColorData color = 2;
inline bool LineData::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineData::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineData::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineData::clear_color() {
  if (color_ != NULL) color_->::ColorData::Clear();
  clear_has_color();
}
inline const ::ColorData& LineData::color() const {
  // @@protoc_insertion_point(field_get:LineData.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::ColorData* LineData::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::ColorData;
  // @@protoc_insertion_point(field_mutable:LineData.color)
  return color_;
}
inline ::ColorData* LineData::release_color() {
  clear_has_color();
  ::ColorData* temp = color_;
  color_ = NULL;
  return temp;
}
inline void LineData::set_allocated_color(::ColorData* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:LineData.color)
}

// -------------------------------------------------------------------

// FeatureData

// repeated .LineData line = 1;
inline int FeatureData::line_size() const {
  return line_.size();
}
inline void FeatureData::clear_line() {
  line_.Clear();
}
inline const ::LineData& FeatureData::line(int index) const {
  // @@protoc_insertion_point(field_get:FeatureData.line)
  return line_.Get(index);
}
inline ::LineData* FeatureData::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:FeatureData.line)
  return line_.Mutable(index);
}
inline ::LineData* FeatureData::add_line() {
  // @@protoc_insertion_point(field_add:FeatureData.line)
  return line_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LineData >&
FeatureData::line() const {
  // @@protoc_insertion_point(field_list:FeatureData.line)
  return line_;
}
inline ::google::protobuf::RepeatedPtrField< ::LineData >*
FeatureData::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:FeatureData.line)
  return &line_;
}

// repeated .PointData point = 2;
inline int FeatureData::point_size() const {
  return point_.size();
}
inline void FeatureData::clear_point() {
  point_.Clear();
}
inline const ::PointData& FeatureData::point(int index) const {
  // @@protoc_insertion_point(field_get:FeatureData.point)
  return point_.Get(index);
}
inline ::PointData* FeatureData::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:FeatureData.point)
  return point_.Mutable(index);
}
inline ::PointData* FeatureData::add_point() {
  // @@protoc_insertion_point(field_add:FeatureData.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
FeatureData::point() const {
  // @@protoc_insertion_point(field_list:FeatureData.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
FeatureData::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:FeatureData.point)
  return &point_;
}

// optional int32 fps = 3;
inline bool FeatureData::has_fps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureData::set_has_fps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureData::clear_has_fps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureData::clear_fps() {
  fps_ = 0;
  clear_has_fps();
}
inline ::google::protobuf::int32 FeatureData::fps() const {
  // @@protoc_insertion_point(field_get:FeatureData.fps)
  return fps_;
}
inline void FeatureData::set_fps(::google::protobuf::int32 value) {
  set_has_fps();
  fps_ = value;
  // @@protoc_insertion_point(field_set:FeatureData.fps)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
